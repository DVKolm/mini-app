import React, { useState, useEffect, useCallback } from 'react';
import { useTelegram } from './hooks/useTelegram';
import { useCart } from './hooks/useCart';
import { productsApi } from './utils/api';
import Categories from './components/Categories';
import ProductCard from './components/ProductCard';
import Cart from './components/Cart';
import './App.css';

function App() {
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isCartVisible, setIsCartVisible] = useState(false);

  const { user, showMainButton, hideMainButton, hapticFeedback, themeParams } = useTelegram();
  const { cartItemsCount, cartTotal, isLoading: isCartLoading } = useCart();

  const loadProducts = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await productsApi.getAll();
      setProducts(data);
    } catch (err) {
      console.error('Error loading products:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
    } finally {
      setLoading(false);
    }
  };

  const filterProducts = useCallback(() => {
    if (selectedCategory) {
      setFilteredProducts(products.filter(product => product.category === selectedCategory));
    } else {
      setFilteredProducts(products);
    }
  }, [products, selectedCategory]);

  useEffect(() => {
    loadProducts();
  }, []);

  useEffect(() => {
    filterProducts();
  }, [filterProducts]);

  useEffect(() => {
    console.log('[App] Cart state changed:', { cartItemsCount, cartTotal, isCartVisible, isCartLoading });
    
    // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞ –∫–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    if (isCartLoading) {
      return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç–∞
    if (isCartVisible || cartItemsCount === 0) {
      console.log('[App] Hiding main button');
      hideMainButton();
    } else if (cartItemsCount > 0) {
      console.log('[App] Showing main button');
      showMainButton(
        `–ö–æ—Ä–∑–∏–Ω–∞ (${cartItemsCount}) ‚Ä¢ ${cartTotal}‚ÇΩ`,
        () => {
          hapticFeedback('light');
          setIsCartVisible(true);
        }
      );
    }

    return () => {
      hideMainButton();
    };
  }, [cartItemsCount, cartTotal, isCartVisible, isCartLoading, showMainButton, hideMainButton, hapticFeedback]);

  const handleCategoryChange = (category) => {
    hapticFeedback('light');
    setSelectedCategory(category);
  };

  const handleCloseCart = () => {
    setIsCartVisible(false);
  };

  if (loading) {
    return (
      <div className="app">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã... ü•õ</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="app">
        <div className="error-container">
          <div className="error-icon">‚ö†Ô∏è</div>
          <h2>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</h2>
          <p>{error}</p>
          <button className="retry-btn" onClick={loadProducts}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div 
      className="app"
      style={{
        backgroundColor: themeParams.bg_color,
        color: themeParams.text_color
      }}
    >
      <header className="app-header">
        <div className="header-content">
          <h1 className="shop-title">
            ü•õ –§–µ—Ä–º–µ—Ä—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω
            {user && <span className="user-greeting">–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</span>}
          </h1>
          {!isCartLoading && cartItemsCount > 0 && (
            <button 
              className="cart-button"
              onClick={() => setIsCartVisible(true)}
            >
              üõí <span className="cart-count">{cartItemsCount}</span>
            </button>
          )}
        </div>
      </header>

      <main className="app-main">
        <Categories 
          selectedCategory={selectedCategory}
          onCategoryChange={handleCategoryChange}
        />

        <div className="products-section">
          <div className="products-header">
            <h2>
              {selectedCategory ? `${selectedCategory}` : '–í—Å–µ —Ç–æ–≤–∞—Ä—ã'}
              <span className="products-count">({filteredProducts.length})</span>
            </h2>
          </div>

          {filteredProducts.length === 0 ? (
            <div className="no-products">
              <div className="no-products-icon">üì¶</div>
              <h3>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
              <p>–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</p>
            </div>
          ) : (
            <div className="products-grid">
              {filteredProducts.map((product) => (
                <ProductCard 
                  key={product.id} 
                  product={product} 
                />
              ))}
            </div>
          )}
        </div>
      </main>

      <Cart 
        isVisible={isCartVisible}
        onClose={handleCloseCart}
      />

      <footer className="app-footer">
        <p>–°–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å —Ñ–µ—Ä–º—ã</p>
        <p className="footer-note">Made by cDeki</p>
      </footer>
    </div>
  );
}

export default App;